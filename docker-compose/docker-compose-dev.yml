version: "3.9"

name: adempiere-report-engine-dev-service

# Example API for images
services:
  adempiere.database:
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_IMAGE}
    restart: ${GENERIC_RESTART}
    volumes:
      - volume_postgres:/var/lib/postgresql/data
      - ./postgresql/initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - ./postgresql/seed.backup:/tmp/seed.backup
      - ./postgresql/after_run:/tmp/after_run
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: 'America/Caracas'
      PGTZ: 'America/Caracas'
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}
    networks:
      - shared_network

  adempiere.zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      ADEMPIERE_DB_SERVER: ${ADEMPIERE_ZK_DB_HOST}
      ADEMPIERE_DB_PORT: ${ADEMPIERE_ZK_DB_PORT}
      ADEMPIERE_DB_NAME: ${ADEMPIERE_ZK_DB_NAME}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_ZK_DB_PASSWORD}
    depends_on:
      adempiere.database:
        condition: service_healthy
    ports:
      - ${ADEMPIERE_ZK_EXTERNAL_PORT}:${ADEMPIERE_ZK_INTERNAL_PORT}
    networks:
      - shared_network
      
  grpc.proxy:
    image: ${ENVOY_GRPC_PROXY_IMAGE}
    container_name: ${ENVOY_GRPC_PROXY_HOSTNAME}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${ENVOY_GRPC_PROXY_INTERNAL_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    volumes:
      - ./envoy/envoy-dev.yaml:/etc/envoy/envoy.yaml:ro
      - ./envoy/definitions/adempiere-report-engine-service.dsc:/data/descriptor.dsc:ro
    ports:
     - ${ENVOY_GRPC_PROXY_EXTERNAL_PORT}:${ENVOY_GRPC_PROXY_INTERNAL_PORT}
    networks:
    - shared_network

networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
